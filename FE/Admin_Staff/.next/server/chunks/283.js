"use strict";exports.id=283,exports.ids=[283],exports.modules={13861:(e,r,t)=>{t.d(r,{A:()=>o});let o=(0,t(62688).A)("Eye",[["path",{d:"M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0",key:"1nclc0"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]])},26134:(e,r,t)=>{t.d(r,{G$:()=>W,Hs:()=>b,UC:()=>er,VY:()=>eo,ZL:()=>Q,bL:()=>K,bm:()=>en,hE:()=>et,hJ:()=>ee,l9:()=>X});var o=t(43210),n=t(70569),a=t(98599),i=t(11273),s=t(96963),l=t(65551),d=t(31355),u=t(32547),c=t(25028),p=t(46059),f=t(14163),g=t(1359),m=t(42247),v=t(63376),h=t(8730),y=t(60687),x="Dialog",[D,b]=(0,i.A)(x),[j,R]=D(x),w=e=>{let{__scopeDialog:r,children:t,open:n,defaultOpen:a,onOpenChange:i,modal:d=!0}=e,u=o.useRef(null),c=o.useRef(null),[p=!1,f]=(0,l.i)({prop:n,defaultProp:a,onChange:i});return(0,y.jsx)(j,{scope:r,triggerRef:u,contentRef:c,contentId:(0,s.B)(),titleId:(0,s.B)(),descriptionId:(0,s.B)(),open:p,onOpenChange:f,onOpenToggle:o.useCallback(()=>f(e=>!e),[f]),modal:d,children:t})};w.displayName=x;var A="DialogTrigger",C=o.forwardRef((e,r)=>{let{__scopeDialog:t,...o}=e,i=R(A,t),s=(0,a.s)(r,i.triggerRef);return(0,y.jsx)(f.sG.button,{type:"button","aria-haspopup":"dialog","aria-expanded":i.open,"aria-controls":i.contentId,"data-state":H(i.open),...o,ref:s,onClick:(0,n.m)(e.onClick,i.onOpenToggle)})});C.displayName=A;var N="DialogPortal",[I,O]=D(N,{forceMount:void 0}),E=e=>{let{__scopeDialog:r,forceMount:t,children:n,container:a}=e,i=R(N,r);return(0,y.jsx)(I,{scope:r,forceMount:t,children:o.Children.map(n,e=>(0,y.jsx)(p.C,{present:t||i.open,children:(0,y.jsx)(c.Z,{asChild:!0,container:a,children:e})}))})};E.displayName=N;var F="DialogOverlay",_=o.forwardRef((e,r)=>{let t=O(F,e.__scopeDialog),{forceMount:o=t.forceMount,...n}=e,a=R(F,e.__scopeDialog);return a.modal?(0,y.jsx)(p.C,{present:o||a.open,children:(0,y.jsx)(P,{...n,ref:r})}):null});_.displayName=F;var P=o.forwardRef((e,r)=>{let{__scopeDialog:t,...o}=e,n=R(F,t);return(0,y.jsx)(m.A,{as:h.DX,allowPinchZoom:!0,shards:[n.contentRef],children:(0,y.jsx)(f.sG.div,{"data-state":H(n.open),...o,ref:r,style:{pointerEvents:"auto",...o.style}})})}),$="DialogContent",G=o.forwardRef((e,r)=>{let t=O($,e.__scopeDialog),{forceMount:o=t.forceMount,...n}=e,a=R($,e.__scopeDialog);return(0,y.jsx)(p.C,{present:o||a.open,children:a.modal?(0,y.jsx)(k,{...n,ref:r}):(0,y.jsx)(T,{...n,ref:r})})});G.displayName=$;var k=o.forwardRef((e,r)=>{let t=R($,e.__scopeDialog),i=o.useRef(null),s=(0,a.s)(r,t.contentRef,i);return o.useEffect(()=>{let e=i.current;if(e)return(0,v.Eq)(e)},[]),(0,y.jsx)(B,{...e,ref:s,trapFocus:t.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:(0,n.m)(e.onCloseAutoFocus,e=>{e.preventDefault(),t.triggerRef.current?.focus()}),onPointerDownOutside:(0,n.m)(e.onPointerDownOutside,e=>{let r=e.detail.originalEvent,t=0===r.button&&!0===r.ctrlKey;(2===r.button||t)&&e.preventDefault()}),onFocusOutside:(0,n.m)(e.onFocusOutside,e=>e.preventDefault())})}),T=o.forwardRef((e,r)=>{let t=R($,e.__scopeDialog),n=o.useRef(!1),a=o.useRef(!1);return(0,y.jsx)(B,{...e,ref:r,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:r=>{e.onCloseAutoFocus?.(r),r.defaultPrevented||(n.current||t.triggerRef.current?.focus(),r.preventDefault()),n.current=!1,a.current=!1},onInteractOutside:r=>{e.onInteractOutside?.(r),r.defaultPrevented||(n.current=!0,"pointerdown"!==r.detail.originalEvent.type||(a.current=!0));let o=r.target;t.triggerRef.current?.contains(o)&&r.preventDefault(),"focusin"===r.detail.originalEvent.type&&a.current&&r.preventDefault()}})}),B=o.forwardRef((e,r)=>{let{__scopeDialog:t,trapFocus:n,onOpenAutoFocus:i,onCloseAutoFocus:s,...l}=e,c=R($,t),p=o.useRef(null),f=(0,a.s)(r,p);return(0,g.Oh)(),(0,y.jsxs)(y.Fragment,{children:[(0,y.jsx)(u.n,{asChild:!0,loop:!0,trapped:n,onMountAutoFocus:i,onUnmountAutoFocus:s,children:(0,y.jsx)(d.qW,{role:"dialog",id:c.contentId,"aria-describedby":c.descriptionId,"aria-labelledby":c.titleId,"data-state":H(c.open),...l,ref:f,onDismiss:()=>c.onOpenChange(!1)})}),(0,y.jsxs)(y.Fragment,{children:[(0,y.jsx)(z,{titleId:c.titleId}),(0,y.jsx)(J,{contentRef:p,descriptionId:c.descriptionId})]})]})}),L="DialogTitle",M=o.forwardRef((e,r)=>{let{__scopeDialog:t,...o}=e,n=R(L,t);return(0,y.jsx)(f.sG.h2,{id:n.titleId,...o,ref:r})});M.displayName=L;var Z="DialogDescription",q=o.forwardRef((e,r)=>{let{__scopeDialog:t,...o}=e,n=R(Z,t);return(0,y.jsx)(f.sG.p,{id:n.descriptionId,...o,ref:r})});q.displayName=Z;var S="DialogClose",V=o.forwardRef((e,r)=>{let{__scopeDialog:t,...o}=e,a=R(S,t);return(0,y.jsx)(f.sG.button,{type:"button",...o,ref:r,onClick:(0,n.m)(e.onClick,()=>a.onOpenChange(!1))})});function H(e){return e?"open":"closed"}V.displayName=S;var U="DialogTitleWarning",[W,Y]=(0,i.q)(U,{contentName:$,titleName:L,docsSlug:"dialog"}),z=({titleId:e})=>{let r=Y(U),t=`\`${r.contentName}\` requires a \`${r.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${r.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${r.docsSlug}`;return o.useEffect(()=>{e&&!document.getElementById(e)&&console.error(t)},[t,e]),null},J=({contentRef:e,descriptionId:r})=>{let t=Y("DialogDescriptionWarning"),n=`Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${t.contentName}}.`;return o.useEffect(()=>{let t=e.current?.getAttribute("aria-describedby");r&&t&&!document.getElementById(r)&&console.warn(n)},[n,e,r]),null},K=w,X=C,Q=E,ee=_,er=G,et=M,eo=q,en=V},62369:(e,r,t)=>{t.d(r,{b:()=>d});var o=t(43210),n=t(14163),a=t(60687),i="horizontal",s=["horizontal","vertical"],l=o.forwardRef((e,r)=>{var t;let{decorative:o,orientation:l=i,...d}=e,u=(t=l,s.includes(t))?l:i;return(0,a.jsx)(n.sG.div,{"data-orientation":u,...o?{role:"none"}:{"aria-orientation":"vertical"===u?u:void 0,role:"separator"},...d,ref:r})});l.displayName="Separator";var d=l},97895:(e,r,t)=>{t.d(r,{UC:()=>_,VY:()=>k,ZD:()=>$,ZL:()=>E,bL:()=>O,hE:()=>G,hJ:()=>F,rc:()=>P});var o=t(43210),n=t(11273),a=t(98599),i=t(26134),s=t(70569),l=t(8730),d=t(60687),u="AlertDialog",[c,p]=(0,n.A)(u,[i.Hs]),f=(0,i.Hs)(),g=e=>{let{__scopeAlertDialog:r,...t}=e,o=f(r);return(0,d.jsx)(i.bL,{...o,...t,modal:!0})};g.displayName=u,o.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...o}=e,n=f(t);return(0,d.jsx)(i.l9,{...n,...o,ref:r})}).displayName="AlertDialogTrigger";var m=e=>{let{__scopeAlertDialog:r,...t}=e,o=f(r);return(0,d.jsx)(i.ZL,{...o,...t})};m.displayName="AlertDialogPortal";var v=o.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...o}=e,n=f(t);return(0,d.jsx)(i.hJ,{...n,...o,ref:r})});v.displayName="AlertDialogOverlay";var h="AlertDialogContent",[y,x]=c(h),D=o.forwardRef((e,r)=>{let{__scopeAlertDialog:t,children:n,...u}=e,c=f(t),p=o.useRef(null),g=(0,a.s)(r,p),m=o.useRef(null);return(0,d.jsx)(i.G$,{contentName:h,titleName:b,docsSlug:"alert-dialog",children:(0,d.jsx)(y,{scope:t,cancelRef:m,children:(0,d.jsxs)(i.UC,{role:"alertdialog",...c,...u,ref:g,onOpenAutoFocus:(0,s.m)(u.onOpenAutoFocus,e=>{e.preventDefault(),m.current?.focus({preventScroll:!0})}),onPointerDownOutside:e=>e.preventDefault(),onInteractOutside:e=>e.preventDefault(),children:[(0,d.jsx)(l.xV,{children:n}),(0,d.jsx)(I,{contentRef:p})]})})})});D.displayName=h;var b="AlertDialogTitle",j=o.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...o}=e,n=f(t);return(0,d.jsx)(i.hE,{...n,...o,ref:r})});j.displayName=b;var R="AlertDialogDescription",w=o.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...o}=e,n=f(t);return(0,d.jsx)(i.VY,{...n,...o,ref:r})});w.displayName=R;var A=o.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...o}=e,n=f(t);return(0,d.jsx)(i.bm,{...n,...o,ref:r})});A.displayName="AlertDialogAction";var C="AlertDialogCancel",N=o.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...o}=e,{cancelRef:n}=x(C,t),s=f(t),l=(0,a.s)(r,n);return(0,d.jsx)(i.bm,{...s,...o,ref:l})});N.displayName=C;var I=({contentRef:e})=>{let r=`\`${h}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${h}\` by passing a \`${R}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${h}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return o.useEffect(()=>{document.getElementById(e.current?.getAttribute("aria-describedby"))||console.warn(r)},[r,e]),null},O=g,E=m,F=v,_=D,P=A,$=N,G=j,k=w}};